{"title": "NASH: Toward End-to-End Neural Architecture for Generative Semantic Hashing", "abstract": "Semantic hashing has become a powerful paradigm for fast similarity search in many information retrieval systems. While fairly successful, previous techniques generally require two-stage training, and the binary constraints are handled ad-hoc. In this paper, we present an end-to-end Neural Architecture for Semantic Hashing (NASH), where the binary hashing codes are treated as Bernoulli latent variables. A neural variational inference framework is proposed for training, where gradients are directly backpropagated through the discrete latent variable to optimize the hash function. We also draw connections between proposed method and rate-distortion theory, which provides a theoretical foundation for the effectiveness of the proposed framework. Experimental results on three public datasets demonstrate that our method significantly outperforms several state-of-the-art models on both unsupervised and supervised scenarios.", "text": [{"id": 0, "string": "Introduction The problem of similarity search, also called nearest-neighbor search, consists of finding documents from a large collection of documents, or corpus, which are most similar to a query document of interest."}, {"id": 1, "string": "Fast and accurate similarity search is at the core of many information retrieval applications, such as plagiarism analysis (Stein et al., 2007) , collaborative filtering (Koren, 2008) , content-based multimedia retrieval (Lew et al., 2006) and caching (Pandey et al., 2009) ."}, {"id": 2, "string": "Semantic hashing is an effective approach for fast similarity search (Salakhutdinov and Hinton, 2009; Zhang * Equal contribution."}, {"id": 3, "string": "et al., 2010; Wang et al., 2014) ."}, {"id": 4, "string": "By representing every document in the corpus as a similaritypreserving discrete (binary) hashing code, the similarity between two documents can be evaluated by simply calculating pairwise Hamming distances between hashing codes, i.e., the number of bits that are different between two codes."}, {"id": 5, "string": "Given that today, an ordinary PC is able to execute millions of Hamming distance computations in just a few milliseconds (Zhang et al., 2010) , this semantic hashing strategy is very computationally attractive."}, {"id": 6, "string": "While considerable research has been devoted to text (semantic) hashing, existing approaches typically require two-stage training procedures."}, {"id": 7, "string": "These methods can be generally divided into two categories: (i) binary codes for documents are first learned in an unsupervised manner, then l binary classifiers are trained via supervised learning to predict the l-bit hashing code (Zhang et al., 2010; Xu et al., 2015) ; (ii) continuous text representations are first inferred, which are binarized as a second (separate) step during testing (Wang et al., 2013; Chaidaroon and Fang, 2017) ."}, {"id": 8, "string": "Because the model parameters are not learned in an end-to-end manner, these two-stage training strategies may result in suboptimal local optima."}, {"id": 9, "string": "This happens because different modules within the model are optimized separately, preventing the sharing of information between them."}, {"id": 10, "string": "Further, in existing methods, binary constraints are typically handled adhoc by truncation, i.e., the hashing codes are obtained via direct binarization from continuous representations after training."}, {"id": 11, "string": "As a result, the information contained in the continuous representations is lost during the (separate) binarization process."}, {"id": 12, "string": "Moreover, training different modules (mapping and classifier/binarization) separately often requires additional hyperparameter tuning for each training stage, which can be laborious and timeconsuming."}, {"id": 13, "string": "In this paper, we propose a simple and generic neural architecture for text hashing that learns binary latent codes for documents in an end-toend manner."}, {"id": 14, "string": "Inspired by recent advances in neural variational inference (NVI) for text processing (Miao et al., 2016; Yang et al., 2017; Shen et al., 2017b) , we approach semantic hashing from a generative model perspective, where binary (hashing) codes are represented as either deterministic or stochastic Bernoulli latent variables."}, {"id": 15, "string": "The inference (encoder) and generative (decoder) networks are optimized jointly by maximizing a variational lower bound to the marginal distribution of input documents (corpus)."}, {"id": 16, "string": "By leveraging a simple and effective method to estimate the gradients with respect to discrete (binary) variables, the loss term from the generative (decoder) network can be directly backpropagated into the inference (encoder) network to optimize the hash function."}, {"id": 17, "string": "Motivated by the rate-distortion theory (Berger, 1971; Theis et al., 2017) , we propose to inject data-dependent noise into the latent codes during the decoding stage, which adaptively accounts for the tradeoff between minimizing rate (number of bits used, or effective code length) and distortion (reconstruction error) during training."}, {"id": 18, "string": "The connection between the proposed method and ratedistortion theory is further elucidated, providing a theoretical foundation for the effectiveness of our framework."}, {"id": 19, "string": "Summarizing, the contributions of this paper are: (i) to the best of our knowledge, we present the first semantic hashing architecture that can be trained in an end-to-end manner; (ii) we propose a neural variational inference framework to learn compact (regularized) binary codes for documents, achieving promising results on both unsupervised and supervised text hashing; (iii) the connection between our method and rate-distortion theory is established, from which we demonstrate the advantage of injecting data-dependent noise into the latent variable during training."}, {"id": 20, "string": "Related Work Models with discrete random variables have attracted much attention in the deep learning community (Jang et al., 2016; Maddison et al., 2016; van den Oord et al., 2017; Li et al., 2017; Shu and Nakayama, 2017) ."}, {"id": 21, "string": "Some of these structures are more natural choices for language or speech data, which are inherently discrete."}, {"id": 22, "string": "More specifically, g (x) < l a t e x i t s h a 1 _ b a s e 6 4 = \" 4 g s o F B p B B A b m y f n 2 Z e N A 3 f T q K 6 U = \" > A A A B 7 3 i c b V B N T w I x E J 3 F L 8 Q v 1 K O X R m K C F 7 J r S N Q b 0 Y t H T F z B w I Z 0 S x c a 2 u 6 m 7 R r J h l / h x Y M a r / 4 d b / 4 b C + x B w Z d M 8 v L e T G b m h Q l n 2 r j u t 1 N Y W V 1 b 3 y h u l r a 2 d 3 b 3 y v s H 9 z p O F a E + i X m s 2 i H W l D N J f c M M p + 1 E U S x C T l v h 6 H r q t x 6 p 0 i y W d 2 a c 0 E D g g W Q R I 9 h Y 6 W H Q 6 y Z D V n 0 6 7 Z U r b s 2 d A S 0 T L y c V y N H s l b + 6 / Z i k g k p D O N a 6 4 7 m J C T K s D C O c T k r d V N M E k x E e 0 I 6 l E g u q g 2 x 2 8 A S d W K W P o l j Z k g b N 1 N 8 T G R Z a j 0 V o O w U 2 Q 7 3 o T c X / v E 5 q o o s g Y z J J D Z V k v i h K O T I x m n 6 P + k x R Y v j Y E k w U s 7 c i M s Q K E 2 M z K t k Q v M W X l 4 l / V r u s u b f 1 S u M q T 6 M I R 3 A M V f D g H B p w A 0 3 w g Y C A Z 3 i F N 0 c 5 L 8 6 7 8 z F v L T j 5 z C H 8 g f P 5 A 5 / Q j 9 M = < / l a t e x i t > < l a t e x i t s h a 1 _ b a s e 6 4 = \" 4 g s o F B p B B A b m y f n 2 Z e N A 3 f T q K 6 U = \" > A A A B 7 3 i c b V B N T w I x E J 3 F L 8 Q v 1 K O X R m K C F 7 J r S N Q b 0 Y t H T F z B w I Z 0 S x c a 2 u 6 m 7 R r J h l / h x Y M a r / 4 d b / 4 b C + x B w Z d M 8 v L e T G b m h Q l n 2 r j u t 1 N Y W V 1 b 3 y h u l r a 2 d 3 b 3 y v s H 9 z p O F a E + i X m s 2 i H W l D N J f c M M p + 1 E U S x C T l v h 6 H r q t x 6 p 0 i y W d 2 a c 0 E D g g W Q R I 9 h Y 6 W H Q 6 y Z D V n 0 6 7 Z U r b s 2 d A S 0 T L y c V y N H s l b + 6 / Z i k g k p D O N a 6 4 7 m J C T K s D C O c T k r d V N M E k x E e 0 I 6 l E g u q g 2 x 2 8 A S d W K W P o l j Z k g b N 1 N 8 T G R Z a j 0 V o O w U 2 Q 7 3 o T c X / v E 5 q o o s g Y z J J D Z V k v i h K O T I x m n 6 P + k x R Y v j Y E k w U s 7 c i M s Q K E 2 M z K t k Q v M W X l 4 l / V r u s u b f 1 S u M q T 6 M I R 3 A M V f D g H B p w A 0 3 w g Y C A Z 3 i F N 0 c 5 L 8 6 7 8 z F v L T j 5 z C H 8 g f P 5 A 5 / Q j 9 M = < / l a t e x i t > < l a t e x i t s h a 1 _ b a s e 6 4 = \" 4 g s o F B p B B A b m y f n 2 Z e N A 3 f T q K 6 U = \" > A A A B 7 3 i c b V B N T w I x E J 3 F L 8 Q v 1 K O X R m K C F 7 J r S N Q b 0 Y t H T F z B w I Z 0 S x c a 2 u 6 m 7 R r J h l / h x Y M a r / 4 d b / 4 b C + x B w Z d M 8 v L e T G b m h Q l n 2 r j u t 1 N Y W V 1 b 3 y h u l r a 2 d 3 b 3 y v s H 9 z p O F a E + i X m s 2 i H W l D N J f c M M p + 1 E U S x C T l v h 6 H r q t x 6 p 0 i y W d 2 a c 0 E D g g W Q R I 9 h Y 6 W H Q 6 y Z D V n 0 6 7 Z U r b s 2 d A S 0 T L y c V y N H s l b + 6 / Z i k g k p D O N a 6 4 7 m J C T K s D C O c T k r d V N M E k x E e 0 I 6 l E g u q g 2 x 2 8 A S d W K W P o l j Z k g b N 1 N 8 T G R Z a j 0 V o O w U 2 Q 7 3 o T c X / v E 5 q o o s g Y z J J D Z V k v i h K O T I x m n 6 P + k x R Y v j Y E k w U s 7 c i M s Q K E 2 M z K t k Q v M W X l 4 l / V r u s u b f 1 S u M q T 6 M I R 3 A M V f D g H B p w A 0 3 w g Y C A Z 3 i F N 0 c 5 L 8 6 7 8 z F v L T j 5 z C H 8 g f P 5 A 5 / Q j 9 M = < / l a t e x i t > z < l a t e x i t s h a 1 _ b a s e 6 4 = \" W I l b T b B F L L c q O v t 8 1 z B c 0 3 G a g J U = \" > A A A B 5 3 i c b V B N S 8 N A E J 3 U r 1 q / q h 6 9 L B b B U 0 l F U G 9 F L x 5 b M L b Q h r L Z T t q 1 m 0 3 Y 3 Q g 1 9 B d 4 8 a D i 1 b / k z X / j t s 1 B W x 8 M P N 6 b Y W Z e k A i u j e t + O 4 W V 1 b X 1 j e J m a W t 7 Z 3 e v v H 9 w r + N U M f R Y L G L V D q h G w S V 6 h h u B 7 U Q h j Q K B r W B 0 M / V b j 6 g 0 j + W d G S f o R 3 Q g e c g Z N V Z q P v X K F b f q z k C W S S 0 n F c j R 6 J W / u v 2 Y p R F K w w T V u l N z E + N n V     For natural language processing (NLP), although significant research has been made to learn continuous deep representations for words or documents (Mikolov et al., 2013; Kiros et al., 2015; , discrete neural representations have been mainly explored in learning word embeddings (Shu and Nakayama, 2017; Chen et al., 2017) ."}, {"id": 23, "string": "In these recent works, words are represented as a vector of discrete numbers, which are very efficient storage-wise, while showing comparable performance on several NLP tasks, relative to continuous word embeddings."}, {"id": 24, "string": "However, discrete representations that are learned in an endto-end manner at the sentence or document level have been rarely explored."}, {"id": 25, "string": "Also there is a lack of strict evaluation regarding their effectiveness."}, {"id": 26, "string": "Our work focuses on learning discrete (binary) representations for text documents."}, {"id": 27, "string": "Further, we employ semantic hashing (fast similarity search) as a mechanism to evaluate the quality of learned binary latent codes."}, {"id": 28, "string": "R w K R T 3 U a D k 7 V R z G o e S t 8 L R z d R v P X J t R K L u c Z z y I K Y D J S L B K F q p 1 R 1 S z J 8 m v W r N r b s z k G X i F a Q G B Z q 9 6 l e 3 n 7 A s 5 g q Z p M Z 0 P D f F I K c a B Z N 8 U u l m h q e U j e i A d y x V N O Y m y G f n T s i J V f o k S r Q t h W S m / p 7 I a W z M O A 5 t Z 0 x x a B a 9 q f i f 1 8 k w u g x y o d I M u W L z R V E m C S Z k + j v p C 8 0 Z y r E l l G l h b y V s S D V l a B O q 2 B C 8 x Z e X i X 9 W v 6 q 7 d + e 1 x n W R R h m O 4 B h O w Y M L a M A t N M E H B i N 4 h l d 4 c 1 L n x X l 3 P u a t J a e Y O Y Q / c D 5 / A B u 5 j 5 w = < / l a t e x i t > x < l a t e x i t s h a 1 _ b a s e 6 4 = \" w r Y R r S 9 n q r 2 / j T K d H N f d R L t L B 0 k = \" > A A A B 5 3 i c b V B N S 8 N A E J 3 U r 1 q / q h 6 9 L B b B U 0 l F U G 9 F L x 5 b M L b Q h r L Z T t q 1 m 0 3 Y 3 Y g l 9 B d 4 8 a D i 1 b / k z X / j t s 1 B W x 8 M P N 6 b Y W Z e k A i u j e t + O 4 W V 1 b X 1 j e J m a W t 7 Z 3 e v v H 9 w r + N U M f R Y L G L V D q h G w S V 6 h h u B 7 U Q h j Q K B r W B 0 M / V b j 6 g 0 j + W d G S f o R 3 Q g e c g Z N V Z q P v X K F b f q z k C W S S 0 n F c j R 6 J W / u v 2 Y p R F K w w T V u l N z E + N n V B n O B E 5 K 3 V R j Q t m I D r B j q a Q R a j + b H T o h J 1 b p k z B W t q Q h M / X 3 R E Y j r c d R Y D s j a o Z 6 0 Z u K / 3 m d 1 I S X f s Z l k h q U b L 4 o T A U x M Z l + T f p c I T N i b A l l i t t b C R t S R Z m x 2 Z R s C L X F / j T K d H N f d R L t L B 0 k = \" > A A A B 5 3 i c b V B N S 8 N A E J 3 U r 1 q / q h 6 9 L B b B U 0 l F U G 9 F L x 5 b M L b Q h r L Z T t q 1 m 0 3 Y 3 Y g l 9 B d 4 8 a D i 1 b / k z X / j t s 1 B W x 8 M P N 6 b Y W Z e k A i u j e t + O 4 W V 1 b X 1 j e J m a W t 7 Z 3 e v v H 9 w r + N U M f R Y L G L V D q h G w S V 6 h h u B 7 U Q h j Q K B r W B 0 M / V b j 6 g 0 j + W d G S f o R 3 Q g e c g Z N V Z q P v X K F b f q z k C W S S 0 n F c j R 6 J W / u v 2 Y p R F K w w T V u l N z E + N n V B n O B E 5 K 3 V R j Q t m I D r B j q a Q R a j + b H T o h J 1 b p k z B W t q Q h M / X 3 R E Y j r c d R Y D s j a o Z 6 0 Z u K / 3 m d 1 I S X f s Z l k h q U b L 4 o T A U x M Z l + T f p c I T N i b A l l i t t b C R t S R Z m x 2 Z R s C L X F / j T K d H N f d R L t L B 0 k = \" > A A A B 5 3 i c b V B N S 8 N A E J 3 U r 1 q / q h 6 9 L B b B U 0 l F U G 9 F L x 5 b M L b Q h r L Z T t q 1 m 0 3 Y 3 Y g l 9 B d 4 8 a D i 1 b / k z X / j t s 1 B W x 8 M P N 6 b Y W Z e k A i u j e t + O 4 W V 1 b X 1 j e J m a W t 7 Z 3 e v v H 9 w r + N U M f R Y L G L V D q h G w S V 6 h h u B 7 U Q h j Q K B r W B 0 M / V b j 6 g 0 j + W d G S f o R 3 Q g e c g Z N V Z q P v X K F b f q z k C W S S 0 n F c j R 6 J W / u v 2 Y p R F K w w T V u l N z E + N n V B n O B E 5 K 3 V R j Q t m I D r B j q a Q R a j + b H T o h J 1 b p k z B W t q Q h M / X 3 R E Y j r c d R Y D s j a o Z 6 0 Z u K / 3 m d 1 I S X f s Z l k h q U b L 4 o T A U x M Z l + T f p c I T N i b A l l i t t b C R t S R Z m x 2 Z R s C L X F l 5 e J d 1 a 9 q r r N 8 0 r 9 O k + j C E d w D K d Q g w u o w y 0 0 w A M G C M / w C m / O g / P i v D s f 8 9 a C k 8 8 c w h 8 4 n z 9 U T Y z P < / l a t e x i t > log 2 < l a t e x i t s h a 1 _ b a s e 6 4 = \" 7 f X R e u S i 2 A G X H Q b F X 8 o a g c V U X c o = \" > A A A B 8 3 i c b V B N S 8 N A E J 3 4 W e t X 1 a O X x S J 4 K k k R 1 F v R i 8 c K x h a a W D b b T b p 0 N x t 3 N 4 V S + j u 8 e F D x 6 p / x 5 r 9 x 2 + a g r Q 8 G H u / N M D M v y j j T x n W / n Z X V t f W N z d J W e X t n d 2 + / c n D 4 o G W u C P W J 5 F K 1 I 6 w p Z y n 1 D T O c t j N F s Y g 4 b U W D m 6 n f G l K l m U z v z S i j o c B J y m J G s L F S G H C Z o E C z R O D H e r d S d W v u D G i Z e A W p Q o F m t / I V 9 C T J B U 0 N 4 V j r j u d m J h x j Z R j h d F I O c k 0 z T A Y 4 o R 1 L U y y o D s e z o y f o 1 C o 9 F E t l K z V o p v 6 e G G O h 9 U h E t l N g 0 9 e L 3 l T 8 z + v k J r 4 M x y z N c k N T M l 8 U 5 x w Z i a Y J o B 5 T l B g + s g Q T x e y t i P S x w s T Y n M o 2 B G / x 5 W X i 1 2 t X N f f u v N q 4 L t I o w T G c w B l 4 c A E N u I U m + E D g C Z 7 h F d 6 c o f P i v D s f 8 9 Y V p 5 g 5 g j 9 w P n 8 A n m W R i g = = < / l a t e x i t > < l a t e x i t s h a 1 _ b a s e 6 4 = \" 7 f X R e u S i 2 A G X H Q b F X 8 o a g c V U X c o = \" > A A A B 8 3 i c b V B N S 8 N A E J 3 4 W e t X 1 a O X x S J 4 K k k R 1 F v R i 8 c K x h a a W D b b T b p 0 N x t 3 N 4 V S + j u 8 e F D x 6 p / x 5 r 9 x 2 + a g r Q 8 G H u / N M D M v y j j T x n W / n Z X V t f W N z d J W e X t n d 2 + / c n D 4 o G W u C P W J 5 F K 1 I 6 w p Z y n 1 D T O c t j N F s Y g 4 b U W D m 6 n f G l K l m U z v z S i j o c B J y m J G s L F S G H C Z o E C z R O D H e r d S d W v u D G i Z e A W p Q o F m t / I V 9 C T J B U 0 N 4 V j r j u d m J h x j Z R j h d F I O c k 0 z T A Y 4 o R 1 L U y y o D s e z o y f o 1 C o 9 F E t l K z V o p v 6 e G G O h 9 U h E t l N g 0 9 e L 3 l T 8 z + v k J r 4 M x y z N c k N T M l 8 U 5 x w Z i a Y J o B 5 T l B g + s g Q T x e y t i P S x w s T Y n M o 2 B G / x 5 W X i 1 2 t X N f f u v N q 4 L t I o w T G c w B l 4 c A E N u I U m + E D g C Z 7 h F d 6 c o f P i v D s f 8 9 Y V p 5 g 5 g j 9 w P n 8 A n m W R i g = = < / l a t e x i t > < l a t e x i t s h a 1 _ b a s e 6 4 = \" 7 f X R e u S i 2 A G X H Q b F X 8 o a g c V U X c o = \" > A A A B 8 3 i c b V B N S 8 N A E J 3 4 W e t X 1 a O X x S J 4 K k k R 1 F v R i 8 c K x h a a W D b b T b p 0 N x t 3 N 4 V S + j u 8 e F D x 6 p / x 5 r 9 x 2 + a g r Q 8 G H u / N M D M v y j j T x n W / n Z X V t f W N z d J W e X t n d 2 + / c n D 4 o G W u C P W J 5 F K 1 I 6 w p Z y n 1 D T O c t j N F s Y g 4 b U W D m 6 n f G l K l m U z v z S i j o c B J y m J G s L F S G H C Z o E C z R O D H e r d S d W v u D G i Z e A W p Q o F m t / I V 9 C T J B U 0 N 4 V j r j u d m J h x j Z R j h d F I O c k 0 z T A Y 4 o R 1 L U y y o D s e z o y f o 1 C o 9 F E t l K z V o p v 6 e G G O h 9 U h E t l N g 0 9 e L 3 l T 8 z + v k J r 4 M x y z N c k N T M l 8 U 5 x w Z i a Y J o B 5 T l B g + s g Q T x e y t i P S x w s T Y n M o 2 B G / x 5 W X i 1 2 t X N f f u v N q 4 L t I o w T G c w B l 4 c A E N u I U m + E D g C Z 7 h F d 6 c o f P i v D s f 8 9 Y V D i l e v 3 v w 3 b t o c t P X B w O O 9 G W b m + R G j U l n W t 1 G Y m 1 9 Y X C o u l 1 Z W 1 9 Y 3 z M 2 t O x n G A h M H h y w U T R 9 J w m h A H E U V I 8 1 I E M R 9 R h r + 4 C L z G w 9 E S B o G t 2 o Y E Y + j X k C 7 F C O l p b a 5 P 7 p P 3 E h Q T l J X U g 5 d j l Q f I 5 Z c p 5 X R I d R a j y N 4 d d A 2 y 1 b V G g P O E j s n Z Z C j 3 j a / 3 E 6 I Y 0 4 C h R m S s m V b k f I S J B T F j K Q l N 5 Y k Q n i A e q S l a Y A 4 k V 4 y f i i F e 1 r p w G 4 o d A U K j t X f E w n i U g 6 5 r z u z e + W 0 l 4 n / e a 1 Y d U + 9 h A Z R r E i A J 4 u 6 M Y M q h F k 6 s E M F w Y o N N U F Y U H 0 r x H 0 k E F Y 6 w 5 I O w Z 5 + e Z Y 4 R 9 W z q n V z X K 6 d 5 2 k U w Q 7 Y B R V g g x N Q A 5 e g D h The Proposed Method Hashing under the NVI Framework Inspired by the recent success of variational autoencoders for various NLP problems (Miao et al., 2016; Bowman et al., 2015; Yang et al., 2017; Miao et al., 2017; Shen et al., 2017b; , we approach the training of discrete (binary) latent variables from a generative perspec-tive."}, {"id": 29, "string": "Let x and z denote the input document and its corresponding binary hash code, respectively."}, {"id": 30, "string": "Most of the previous text hashing methods focus on modeling the encoding distribution p(z|x), or hash function, so the local/global pairwise similarity structure of documents in the original space is preserved in latent space (Zhang et al., 2010; Wang et al., 2013; Xu et al., 2015; Wang et al., 2014) ."}, {"id": 31, "string": "However, the generative (decoding) process of reconstructing x from binary latent code z, i.e., modeling distribution p(x|z), has been rarely considered."}, {"id": 32, "string": "Intuitively, latent codes learned from a model that accounts for the generative term should naturally encapsulate key semantic information from x because the generation/reconstruction objective is a function of p(x|z)."}, {"id": 33, "string": "In this regard, the generative term provides a natural training objective for semantic hashing."}, {"id": 34, "string": "We define a generative model that simultaneously accounts for both the encoding distribution, p(z|x), and decoding distribution, p(x|z), by defining approximations q \u03c6 (z|x) and q \u03b8 (x|z), via inference and generative networks, g \u03c6 (x) and g \u03b8 (z), parameterized by \u03c6 and \u03b8, respectively."}, {"id": 35, "string": "Specifically, x \u2208 Z |V | + is the bag-of-words (count) representation for the input document, where |V | is the vocabulary size."}, {"id": 36, "string": "Notably, we can also employ other count weighting schemes as input features x, e.g., the term frequency-inverse document frequency (TFIDF) (Manning et al., 2008) ."}, {"id": 37, "string": "For the encoding distribution, a latent variable z is first inferred from the input text x, by constructing an inference network g \u03c6 (x) to approximate the true posterior distribution p(z|x) as q \u03c6 (z|x)."}, {"id": 38, "string": "Subsequently, the decoder network g \u03b8 (z) maps z back into input space to reconstruct the original sequence x asx, approximating p(x|z) as q \u03b8 (x|z) (as shown in Figure 1 )."}, {"id": 39, "string": "This cyclic strategy, x \u2192 z \u2192x \u2248 x, provides the latent variable z with a better ability to generalize (Miao et al., 2016) ."}, {"id": 40, "string": "To tailor the NVI framework for semantic hashing, we cast z as a binary latent variable and assume a multivariate Bernoulli prior on z: p(z) \u223c Bernoulli(\u03b3) = l i=1 \u03b3 z i i (1 \u2212 \u03b3 i ) 1\u2212z i , where \u03b3 i \u2208 [0, 1] is component i of vector \u03b3."}, {"id": 41, "string": "Thus, the encoding (approximate posterior) distribution q \u03c6 (z|x) is restricted to take the form q \u03c6 (z|x) = Bernoulli(h), where h = \u03c3(g \u03c6 (x)), \u03c3(\u00b7) is the sigmoid function, and g \u03c6 (\u00b7) is the (nonlinear) inference network specified as a multilayer perceptron (MLP)."}, {"id": 42, "string": "As illustrated in Figure 1 , we can obtain samples from the Bernoulli posterior either deterministically or stochastically."}, {"id": 43, "string": "Suppose z is a l-bit hash code, for the deterministic binarization, we have, for i = 1, 2, ......, l: z i = 1 \u03c3(g i \u03c6 (x))>0.5 = sign(\u03c3(g i \u03c6 (x) \u2212 0.5) + 1 2 , (1) where z is the binarized variable, and z i and g i \u03c6 (x) denote the i-th dimension of z and g \u03c6 (x), respectively."}, {"id": 44, "string": "The standard Bernoulli sampling in (1) can be understood as setting a hard threshold at 0.5 for each representation dimension, therefore, the binary latent code is generated deterministically."}, {"id": 45, "string": "Another strategy to obtain the discrete variable is to binarize h in a stochastic manner: z i = 1 \u03c3(g i \u03c6 (x))>\u00b5 i = sign(\u03c3(g i \u03c6 (x)) \u2212 \u00b5 i ) + 1 2 , (2) where \u00b5 i \u223c Uniform(0, 1)."}, {"id": 46, "string": "Because of this sampling process, we do not have to assume a predefined threshold value like in (1)."}, {"id": 47, "string": "Training with Binary Latent Variables To estimate the parameters of the encoder and decoder networks, we would ideally maximize the marginal distribution p(x) = p(z)p(x|z)dz."}, {"id": 48, "string": "However, computing this marginal is intractable in most cases of interest."}, {"id": 49, "string": "Instead, we maximize a variational lower bound."}, {"id": 50, "string": "This approach is typically employed in the VAE framework (Kingma and Welling, 2013) : L vae = E q \u03c6 (z|x) log q \u03b8 (x|z)p(z) q \u03c6 (z|x) , (3) = E q \u03c6 (z|x) [log q \u03b8 (x|z)] \u2212 D KL (q \u03c6 (z|x)||p(z)), where the Kullback-Leibler (KL) divergence D KL (q \u03c6 (z|x)||p(z)) encourages the approximate posterior distribution q \u03c6 (z|x) to be close to the multivariate Bernoulli prior p(z)."}, {"id": 51, "string": "In this case, D KL (q \u03c6 (z|x)|p(z)) can be written in closed-form as a function of g \u03c6 (x): D KL = g \u03c6 (x) log g \u03c6 (x) \u03b3 + (1 \u2212 g \u03c6 (x)) log 1 \u2212 g \u03c6 (x) 1 \u2212 \u03b3 ."}, {"id": 52, "string": "(4) Note that the gradient for the KL divergence term above can be evaluated easily."}, {"id": 53, "string": "For the first term in (3) , we should in principle estimate the influence of \u00b5 i in (2) on q \u03b8 (x|z) by averaging over the entire (uniform) noise distribution."}, {"id": 54, "string": "However, a closed-form distribution does not exist since it is not possible to enumerate all possible configurations of z, especially when the latent dimension is large."}, {"id": 55, "string": "Moreover, discrete latent variables are inherently incompatible with backpropagation, since the derivative of the sign function is zero for almost all input values."}, {"id": 56, "string": "As a result, the exact gradients of L vae wrt the inputs before binarization would be essentially all zero."}, {"id": 57, "string": "To estimate the gradients for binary latent variables, we utilize the straight-through (ST) estimator, which was first introduced by Hinton (2012) ."}, {"id": 58, "string": "So motivated, the strategy here is to simply backpropagate through the hard threshold by approximating the gradient \u2202z/\u2202\u03c6 as 1."}, {"id": 59, "string": "Thus, we have: dE q \u03c6 (z|x) [log q \u03b8 (x|z)] \u2202\u03c6 = dE q \u03c6 (z|x) [log q \u03b8 (x|z)] dz dz d\u03c3(g i \u03c6 (x)) d\u03c3(g i \u03c6 (x)) d\u03c6 \u2248 dE q \u03c6 (z|x) [log q \u03b8 (x|z)] dz d\u03c3(g i \u03c6 (x)) d\u03c6 (5) Although this is clearly a biased estimator, it has been shown to be a fast and efficient method relative to other gradient estimators for discrete variables, especially for the Bernoulli case (Bengio et al., 2013; Hubara et al., 2016; Theis et al., 2017) ."}, {"id": 60, "string": "With the ST gradient estimator, the first loss term in (3) can be backpropagated into the encoder network to fine-tune the hash function g \u03c6 (x)."}, {"id": 61, "string": "For the approximate generator q \u03b8 (x|z) in (3) , let x i denote the one-hot representation of ith word within a document."}, {"id": 62, "string": "Note that x = i x i is thus the bag-of-words representation for document x."}, {"id": 63, "string": "To reconstruct the input x from z, we utilize a softmax decoding function written as: q(x i = w|z) = exp(z T Ex w + b w ) |V | j=1 exp(z T Ex j + b j ) , (6) where q(x i = w|z) is the probability that x i is word w \u2208 V , q \u03b8 (x|z) = i q(x i = w|z) and \u03b8 = {E, b 1 , ."}, {"id": 64, "string": "."}, {"id": 65, "string": "."}, {"id": 66, "string": ", b |V | }."}, {"id": 67, "string": "Note that E \u2208 R d\u00d7|V | can be interpreted as a word embedding matrix to be learned, and {b i } |V | i=1 denote bias terms."}, {"id": 68, "string": "Intuitively, the objective in (6) encourages the discrete vector z to be close to the embeddings for every word that appear in the input document x."}, {"id": 69, "string": "As shown in Section 5.3.1, meaningful semantic structures can be learned and manifested in the word embedding matrix E. Injecting Data-dependent Noise to z To reconstruct text data x from sampled binary representation z, a deterministic decoder is typically utilized (Miao et al., 2016; Chaidaroon and Fang, 2017 )."}, {"id": 70, "string": "Inspired by the success of employing stochastic decoders in image hashing applications (Dai et al., 2017; Theis et al., 2017) , in our experiments, we found that injecting random Gaussian noise into z makes the decoder a more favorable regularizer for the binary codes, which in practice leads to stronger retrieval performance."}, {"id": 71, "string": "Below, we invoke the rate-distortion theory to perform some further analysis, which leads to interesting findings."}, {"id": 72, "string": "Learning binary latent codes z to represent a continuous distribution p(x) is a classical information theory concept known as lossy source coding."}, {"id": 73, "string": "From this perspective, semantic hashing, which compresses an input document into compact binary codes, can be casted as a conventional ratedistortion tradeoff problem (Theis et al., 2017; Ball\u00e9 et al., 2016) : min \u2212 log 2 R(z) Rate +\u03b2 \u00b7D(x,x) Distortion , (7) where rate and distortion denote the effective code length, i.e., the number of bits used, and the distortion introduced by the encoding/decoding sequence, respectively."}, {"id": 74, "string": "Further,x is the reconstructed input and \u03b2 is a hyperparameter that controls the tradeoff between the two terms."}, {"id": 75, "string": "Considering the case where we have a Bernoulli prior on z as p(z) \u223c Bernoulli(\u03b3), and x conditionally drawn from a Gaussian distribution p(x|z) \u223c N (Ez, \u03c3 2 I)."}, {"id": 76, "string": "Here, E = {e i } |V | i=1 , where e i \u2208 R d can be interpreted as a codebook with |V | codewords."}, {"id": 77, "string": "In our case, E corresponds to the word embedding matrix as in (6) ."}, {"id": 78, "string": "For the case of stochastic latent variable z, the objective function in (3) can be written in a form similar to the rate-distortion tradeoff: min E q \u03c6 (z|x) \uf8ee \uf8ef \uf8ef \uf8f0 \u2212 log q \u03c6 (z|x) Rate + 1 2\u03c3 2 \u03b2 ||x \u2212 Ez|| 2 2 Distortion +C \uf8f9 \uf8fa \uf8fa \uf8fb , (8) where C is a constant that encapsulates the prior distribution p(z) and the Gaussian distribution normalization term."}, {"id": 79, "string": "Notably, the trade-off hyperparameter \u03b2 = \u03c3 \u22122 /2 is closely related to the variance of the distribution p(x|z)."}, {"id": 80, "string": "In other words, by controlling the variance \u03c3, the model can adaptively explore different trade-offs between the rate and distortion objectives."}, {"id": 81, "string": "However, the optimal trade-offs for distinct samples may be different."}, {"id": 82, "string": "Inspired by the observations above, we propose to inject data-dependent noise into latent variable z, rather than to setting the variance term \u03c3 2 to a fixed value (Dai et al., 2017; Theis et al., 2017) ."}, {"id": 83, "string": "Specifically, log \u03c3 2 is obtained via a one-layer MLP transformation from g \u03c6 (x)."}, {"id": 84, "string": "Afterwards, we sample z from N (z, \u03c3 2 I), which then replace z in (6) to infer the probability of generating individual words (as shown in Figure 1 )."}, {"id": 85, "string": "As a result, the variances are different for every input document x, and thus the model is provided with additional flexibility to explore various trade-offs between rate and distortion for different training observations."}, {"id": 86, "string": "Although our decoder is not a strictly Gaussian distribution, as in (6) , we found empirically that injecting data-dependent noise into z yields strong retrieval results, see Section 5.1."}, {"id": 87, "string": "Supervised Hashing The proposed Neural Architecture for Semantic Hashing (NASH) can be extended to supervised hashing, where a mapping from latent variable z to labels y is learned, here parametrized by a twolayer MLP followed by a fully-connected softmax layer."}, {"id": 88, "string": "To allow the model to explore and balance between maximizing the variational lower bound in (3) and minimizing the discriminative loss, the following joint training objective is employed: L = \u2212L vae (\u03b8, \u03c6; x) + \u03b1L dis (\u03b7; z, y)."}, {"id": 89, "string": "(9) where \u03b7 refers to parameters of the MLP classifier and \u03b1 controls the relative weight between the variational lower bound (L vae ) and discriminative loss (L dis ), defined as the cross-entropy loss."}, {"id": 90, "string": "The parameters {\u03b8, \u03c6, \u03b7} are learned end-to-end via Monte Carlo estimation."}, {"id": 91, "string": "Experimental Setup Datasets We use the following three standard publicly available datasets for training and evaluation: (i) Reuters21578, containing 10,788 news documents, which have been classified into 90 different categories."}, {"id": 92, "string": "(ii) 20Newsgroups, a collection of 18,828 newsgroup documents, which are categorized into 20 different topics."}, {"id": 93, "string": "(iii) TMC (stands for SIAM text mining competition), containing air traffic reports provided by NASA."}, {"id": 94, "string": "TMC consists 21,519 training documents divided into 22 different categories."}, {"id": 95, "string": "To make direct comparison with prior works, we employed the TFIDF features on these datasets supplied by (Chaidaroon and Fang, 2017) , where the vocabulary sizes for the three datasets are set to 10,000, 7,164 and 20,000, respectively."}, {"id": 96, "string": "Training Details For the inference networks, we employ a feedforward neural network with 2 hidden layers (both with 500 units) using the ReLU non-linearity activation function, which transform the input documents, i.e., TFIDF features in our experiments, into a continuous representation."}, {"id": 97, "string": "Empirically, we found that stochastic binarization as in (2) shows stronger performance than deterministic binarization, and thus use the former in our experiments."}, {"id": 98, "string": "However, we further conduct a systematic ablation study in Section 5.2 to compare the two binarization strategies."}, {"id": 99, "string": "Our model is trained using Adam (Kingma and Ba, 2014), with a learning rate of 1 \u00d7 10 \u22123 for all parameters."}, {"id": 100, "string": "We decay the learning rate by a factor of 0.96 for every 10,000 iterations."}, {"id": 101, "string": "Dropout (Srivastava et al., 2014) is employed on the output of encoder networks, with the rate selected from {0.7, 0.8, 0.9} on the validation set."}, {"id": 102, "string": "To facilitate comparisons with previous methods, we set the dimension of z, i.e., the number of bits within the hashing code) as 8, 16, 32, 64, or 128."}, {"id": 103, "string": "Baselines We evaluate the effectiveness of our framework on both unsupervised and supervised semantic hashing tasks."}, {"id": 104, "string": "We consider the following unsupervised baselines for comparisons: Locality Sensitive Hashing (LSH) (Datar et al., 2004) , Stack Restricted Boltzmann Machines (S-RBM) (Salakhutdinov and Hinton, 2009 ), Spectral Hashing (SpH) (Weiss et al., 2009 ), Self-taught Hashing (STH) (Zhang et al., 2010) and Variational Deep Semantic Hashing (VDSH) (Chaidaroon and Fang, 2017) ."}, {"id": 105, "string": "For supervised semantic hashing, we also compare NASH against a number of baselines: Supervised Hashing with Kernels (KSH) (Liu et al., 2012) , Semantic Hashing using Tags and Topic Modeling (SHTTM) (Wang et al., 2013) and Supervised VDSH (Chaidaroon and Fang, 2017) ."}, {"id": 106, "string": "It is worth noting that unlike all these baselines, our NASH model is trained end-to-end in one-step."}, {"id": 107, "string": "Evaluation Metrics To evaluate the hashing codes for similarity search, we consider each document in the testing set as a query document."}, {"id": 108, "string": "Similar documents to the query in the corresponding training set need to be retrieved based on the Hamming distance of their hashing codes, i.e."}, {"id": 109, "string": "number of different bits."}, {"id": 110, "string": "To facilitate comparison with prior work (Wang et al., 2013; Chaidaroon and Fang, 2017) , the performance is measured with precision."}, {"id": 111, "string": "Specifically, during testing, for a query document, we first retrieve the 100 nearest/closest documents according to the Hamming distances of the corresponding hash codes (i.e., the number of different bits)."}, {"id": 112, "string": "We then examine the percentage of documents among these 100 retrieved ones that belong to the same label (topic) with the query document (we consider documents having the same label as relevant pairs)."}, {"id": 113, "string": "The ratio of the number of relevant documents to the number of retrieved documents (fixed value of 100) is calculated as the precision score."}, {"id": 114, "string": "The precision scores are further averaged over all test (query) documents."}, {"id": 115, "string": "Experimental Results We experimented with four variants for our NASH model: (i) NASH: with deterministic decoder; (ii) NASH-N: with fixed random noise injected to decoder; (iii) NASH-DN: with data-dependent noise injected to decoder; (iv) NASH-DN-S: NASH-DN with supervised information during training."}, {"id": 116, "string": "Table 1 presents the results of all models on Reuters dataset."}, {"id": 117, "string": "Regarding unsupervised semantic hashing, all the NASH variants consistently outperform the baseline methods by a substantial margin, indicating that our model makes the most effective use of unlabeled data and manage to assign similar hashing codes, i.e., with small Hamming distance to each other, to documents that belong to the same label."}, {"id": 118, "string": "It can be also observed that the injection of noise into the decoder networks has improved the robustness of learned binary representations, resulting in better retrieval performance."}, {"id": 119, "string": "More importantly, by making the variances of noise adaptive to the specific input, our NASH-DN achieves even better results, compared with NASH-N, highlighting the importance of exploring/learning the trade-off between rate and distortion objectives by the data itself."}, {"id": 120, "string": "We observe the same trend and superiority of our NASH-DN models on the other two benchmarks, as shown in Tables 3 and 4 ."}, {"id": 121, "string": "Semantic Hashing Evaluation Another observation is that the retrieval results tend to drop a bit when we set the length of hashing codes to be 64 or larger, which also happens for some baseline models."}, {"id": 122, "string": "This phenomenon has been reported previously in ; Liu et al."}, {"id": 123, "string": "(2012) ; Wang et al."}, {"id": 124, "string": "(2013) ; Chaidaroon and Fang (2017) , and the reasons could be twofold: (i) for longer codes, the number of data points that are assigned to a certain binary code decreases exponentially."}, {"id": 125, "string": "As a result, many queries may fail to return any neighbor documents ; (ii) considering the size of training data, it is likely that the model may overfit with long hash codes (Chaidaroon and Fang, 2017) ."}, {"id": 126, "string": "However, even with longer hashing codes, Word  weapons  medical  companies  define  israel  book   NASH   gun  treatment  company  definition  israeli  books  guns  disease  market  defined  arabs  english  weapon  drugs  afford  explained  arab  references  armed  health  products  discussion  jewish  learning  assault  medicine  money  knowledge  jews  reference   NVDM   guns  medicine  expensive  defined  israeli  books  weapon  health  industry  definition  arab  reference  gun  treatment  company  printf  arabs  guide  militia  disease  market  int  lebanon  writing  armed  patients  buy  sufficient  lebanese  pages   Table 2 : The five nearest words in the semantic space learned by NASH, compared with the results from NVDM (Miao et al., 2016) ."}, {"id": 127, "string": "our NASH models perform stronger than the baselines in most cases (except for the 20Newsgroups dataset), suggesting that NASH can effectively allocate documents to informative/meaningful hashing codes even with limited training data."}, {"id": 128, "string": "We also evaluate the effectiveness of NASH in a supervised scenario on the Reuters dataset, where the label or topic information is utilized during training."}, {"id": 129, "string": "As shown in Figure 2 , our NASH-DN-S model consistently outperforms several supervised semantic hashing baselines, with various choices of hashing bits."}, {"id": 130, "string": "Notably, our model exhibits higher Top-100 retrieval precision than VDSH-S and VDSH-SP, proposed by Chaidaroon and Fang (2017) ."}, {"id": 131, "string": "This may be attributed to the fact that in VDSH models, the continuous embeddings are not optimized with their future binarization in mind, and thus could hurt the relevance of learned binary codes."}, {"id": 132, "string": "On the contrary, our model is optimized in an end-to-end manner, where the gradients are directly backpropagated to the inference network (through the binary/discrete latent variable), and thus gives rise to a more robust hash function."}, {"id": 133, "string": "Ablation study The effect of stochastic sampling As described in Section 3, the binary latent variables z in NASH can be either deterministically (via (1)) or stochastically (via (2)) sampled."}, {"id": 134, "string": "We compare these two types of binarization functions in the case of unsupervised hashing."}, {"id": 135, "string": "As illustrated in Figure 3 , stochastic sampling shows stronger retrieval results on all three datasets, indicating that endowing the sampling process of latent variables with more stochasticity improves the learned representations."}, {"id": 136, "string": "The effect of encoder/decoder networks Under the variational framework introduced here, the encoder network, i.e., hash function, and decoder network are jointly optimized to abstract semantic features from documents."}, {"id": 137, "string": "An interesting question concerns what types of network should be leveraged for each part of our NASH model."}, {"id": 138, "string": "In this regard, we further investigate the effect of Category Title/Subject 8-bit code 16-bit code Baseball Dave Kingman for the hall of fame 1 1 1 0 1 0 0 1 0 0 1 0 1 1 0 1 0 0 0 0 0 1 1 0 Time of game 1 1 1 1 1 0 0 1 0 0 1 0 1 0 0 1 0 0 0 0 0 1 1 1 Game score report 1 1 1 0 1 0 0 1 0 0 1 0 1 1 0 1 0 0 0 0 0 1 1 0 Why is Barry Bonds not batting 4th?"}, {"id": 139, "string": "1 1 1 0 1 1 0 1 0 0 1 1 1 1 0 1 0 0 0 0 0 1 1 0 Electronics Building a UV flashlight 1 0 1 1 0 1 0 0 0 0 1 0 0 0 1 0 0 0 1 0 1 0 1 1 How to drive an array of LEDs 1 0 1 1 0 1 0 1 0 0 1 0 0 0 1 0 0 0 1 0 1 0 0 1 2% silver solder 1 1 0 1 0 1 0 1 0 0 1 0 0 0 1 0 0 0 1 0 1 0 1 1 Subliminal message flashing on TV 1 0 1 1 0 1 0 0 0 0 1 0 0 1 1 0 0 0 1 0 1 0 0 1  using an encoder or decoder with different nonlinearity, ranging from a linear transformation to two-layer MLPs."}, {"id": 140, "string": "We employ a base model with an encoder of two-layer MLPs and a linear decoder (the setup described in Section 3), and the ablation study results are shown in Table 6 ."}, {"id": 141, "string": "Network Encoder Decoder linear 0.5844 0.6225 one-layer MLP 0.6187 0.3559 two-layer MLP 0.6225 0.1047 Table 6 : Ablation study with different encoder/decoder networks."}, {"id": 142, "string": "It is observed that for the encoder networks, increasing the non-linearity by stacking MLP layers leads to better empirical results."}, {"id": 143, "string": "In other words, endowing the hash function with more modeling capacity is advantageous to retrieval tasks."}, {"id": 144, "string": "However, when we employ a non-linear network for the decoder, the retrieval precision drops dramatically."}, {"id": 145, "string": "It is worth noting that the only difference between linear transformation and one-layer MLP is whether a non-linear activation function is employed or not."}, {"id": 146, "string": "This observation may be attributed the fact that the decoder networks can be considered as a sim-ilarity measure between latent variable z and the word embeddings E k for every word, and the probabilities for words that present in the document is maximized to ensure that z is informative."}, {"id": 147, "string": "As a result, if we allow the decoder to be too expressive (e.g., a one-layer MLP), it is likely that we will end up with a very flexible similarity measure but relatively less meaningful binary representations."}, {"id": 148, "string": "This finding is consistent with several image hashing methods, such as SGH (Dai et al., 2017) or binary autoencoder (Carreira-Perpin\u00e1n and Raziperchikolaei, 2015) , where a linear decoder is typically adopted to obtain promising retrieval results."}, {"id": 149, "string": "However, our experiments may not speak for other choices of encoder-decoder architectures, e.g., LSTM-based sequence-to-sequence models  or DCNN-based autoencoder (Zhang et al., 2017) ."}, {"id": 150, "string": "Qualitative Analysis Analysis of Semantic Information To understand what information has been learned in our NASH model, we examine the matrix E \u2208 R d\u00d7l in (6)."}, {"id": 151, "string": "Similar to (Miao et al., 2016; Larochelle and Lauly, 2012) , we select the 5 nearest words according to the word vectors learned from NASH and compare with the corresponding results from NVDM."}, {"id": 152, "string": "As shown in Table 2 , although our NASH model contains a binary latent variable, rather than a continuous one as in NVDM, it also effectively group semantically-similar words together in the learned vector space."}, {"id": 153, "string": "This further demonstrates that the proposed generative framework manages to bypass the binary/discrete constraint and is able to abstract useful semantic information from documents."}, {"id": 154, "string": "Case Study In Table 5 , we show some examples of the learned binary hashing codes on 20Newsgroups dataset."}, {"id": 155, "string": "We observe that for both 8-bit and 16bit cases, NASH typically compresses documents with shared topics into very similar binary codes."}, {"id": 156, "string": "On the contrary, the hashing codes for documents with different topics exhibit much larger Hamming distance."}, {"id": 157, "string": "As a result, relevant documents can be efficiently retrieved by simply computing their Hamming distances."}, {"id": 158, "string": "Conclusions This paper presents a first step towards end-to-end semantic hashing, where the binary/discrete constraints are carefully handled with an effective gradient estimator."}, {"id": 159, "string": "A neural variational framework is introduced to train our model."}, {"id": 160, "string": "Motivated by the connections between the proposed method and rate-distortion theory, we inject data-dependent noise into the Bernoulli latent variable at the training stage."}, {"id": 161, "string": "The effectiveness of our framework is demonstrated with extensive experiments."}], "headers": [{"section": "Introduction", "n": "1", "start": 0, "end": 19}, {"section": "Related Work", "n": "2", "start": 20, "end": 28}, {"section": "Hashing under the NVI Framework", "n": "3.1", "start": 29, "end": 46}, {"section": "Training with Binary Latent Variables", "n": "3.2", "start": 47, "end": 68}, {"section": "Injecting Data-dependent Noise to z", "n": "3.3", "start": 69, "end": 86}, {"section": "Supervised Hashing", "n": "3.4", "start": 87, "end": 90}, {"section": "Datasets", "n": "4.1", "start": 91, "end": 95}, {"section": "Training Details", "n": "4.2", "start": 96, "end": 102}, {"section": "Baselines", "n": "4.3", "start": 103, "end": 106}, {"section": "Evaluation Metrics", "n": "4.4", "start": 107, "end": 114}, {"section": "Experimental Results", "n": "5", "start": 115, "end": 120}, {"section": "Semantic Hashing Evaluation", "n": "5.1", "start": 121, "end": 132}, {"section": "The effect of stochastic sampling", "n": "5.2.1", "start": 133, "end": 134}, {"section": "The effect of encoder/decoder networks", "n": "5.2.2", "start": 135, "end": 149}, {"section": "Analysis of Semantic Information", "n": "5.3.1", "start": 150, "end": 153}, {"section": "Case Study", "n": "5.3.2", "start": 154, "end": 157}, {"section": "Conclusions", "n": "6", "start": 158, "end": 161}], "figures": [{"filename": "../figure/image/955-Table1-1.png", "caption": "Table 1: Precision of the top 100 retrieved documents on Reuters dataset (Unsupervised hashing).", "page": 5, "bbox": {"x1": 72.0, "x2": 289.44, "y1": 61.44, "y2": 163.2}}, {"filename": "../figure/image/955-Figure2-1.png", "caption": "Figure 2: Precision of the top 100 retrieved documents on Reuters dataset (Supervised hashing), compared with other supervised baselines.", "page": 5, "bbox": {"x1": 328.32, "x2": 505.91999999999996, "y1": 66.24, "y2": 186.23999999999998}}, {"filename": "../figure/image/955-Table6-1.png", "caption": "Table 6: Ablation study with different encoder/decoder networks.", "page": 7, "bbox": {"x1": 101.75999999999999, "x2": 261.12, "y1": 483.84, "y2": 540.0}}, {"filename": "../figure/image/955-Figure3-1.png", "caption": "Figure 3: The precisions of the top 100 retrieved documents for NASH-DN with stochastic or deterministic binary latent variables.", "page": 7, "bbox": {"x1": 104.64, "x2": 261.12, "y1": 202.56, "y2": 312.96}}, {"filename": "../figure/image/955-Table5-1.png", "caption": "Table 5: Examples of learned compact hashing codes on 20Newsgroups dataset.", "page": 7, "bbox": {"x1": 108.0, "x2": 489.12, "y1": 61.44, "y2": 161.28}}, {"filename": "../figure/image/955-Figure1-1.png", "caption": "Figure 1: NASH for end-to-end semantic hashing. The inference network maps x\u2192 z using an MLP and the generative network recovers x as z \u2192 x\u0302.", "page": 1, "bbox": {"x1": 328.8, "x2": 504.0, "y1": 60.48, "y2": 162.72}}, {"filename": "../figure/image/955-Table4-1.png", "caption": "Table 4: Precision of the top 100 retrieved documents on TMC dataset.", "page": 6, "bbox": {"x1": 72.0, "x2": 289.44, "y1": 451.68, "y2": 620.16}}, {"filename": "../figure/image/955-Table2-1.png", "caption": "Table 2: The five nearest words in the semantic space learned by NASH, compared with the results from NVDM (Miao et al., 2016).", "page": 6, "bbox": {"x1": 132.96, "x2": 464.15999999999997, "y1": 61.44, "y2": 180.95999999999998}}, {"filename": "../figure/image/955-Table3-1.png", "caption": "Table 3: Precision of the top 100 retrieved documents on 20Newsgroups dataset.", "page": 6, "bbox": {"x1": 72.0, "x2": 289.44, "y1": 233.76, "y2": 402.24}}]}