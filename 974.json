{"title": "Reducing Over-generation Errors for Automatic Keyphrase Extraction using Integer Linear Programming", "abstract": "We introduce a global inference model for keyphrase extraction that reduces overgeneration errors by weighting sets of keyphrase candidates according to their component words. Our model can be applied on top of any supervised or unsupervised word weighting function. Experimental results show a substantial improvement over commonly used word-based ranking approaches.", "text": [{"id": 0, "string": "Introduction Keyphrases are words or phrases that capture the main topics discussed in a document."}, {"id": 1, "string": "Automatically extracted keyphrases have been found to be useful for many natural language processing and information retrieval tasks, such as summarization (Litvak and Last, 2008) , opinion mining (Berend, 2011) or text categorization (Hulth and Megyesi, 2006) ."}, {"id": 2, "string": "Despite considerable research effort, the automatic extraction of keyphrases that match those of human experts remains challenging (Kim et al., 2010) ."}, {"id": 3, "string": "Recent work has shown that most errors made by state-of-the-art keyphrase extraction systems are due to over-generation (Hasan and Ng, 2014) ."}, {"id": 4, "string": "Over-generation errors occur when a system correctly outputs a keyphrase because it contains an important word, but at the same time erroneously predicts other keyphrase candidates as keyphrases because they contain the same word."}, {"id": 5, "string": "One reason these errors are frequent is that many unsupervised systems rank candidates according to the weights of their component words, e.g."}, {"id": 6, "string": "(Wan and Xiao, 2008a; Liu et al., 2009) , and many supervised systems use unigrams as features, e.g."}, {"id": 7, "string": "(Turney, 2000; Nguyen and Luong, 2010) ."}, {"id": 8, "string": "While weighting words instead of phrases may seem rather blunt, it offers several advantages."}, {"id": 9, "string": "In practice, words are usually much easier to extract, match and weight, especially for short documents where many phrases may not be statistically frequent (Liu et al., 2011) ."}, {"id": 10, "string": "Selecting keyphrase candidates according to their component words may also turn out to be useful for reducing over-generation errors if one can ensure that the importance of each word is counted only once in the set of extracted keyphrases."}, {"id": 11, "string": "To do so, keyphrases should be extracted as a set rather than independently."}, {"id": 12, "string": "Finding the optimal set of keyphrases is a combinatorial optimisation problem, and can be formulated as an integer linear program (ILP) which can be solved exactly using off-the-shelf solvers."}, {"id": 13, "string": "In this work, we propose an ILP formulation for keyphrase extraction that can be applied on top of any word weighting scheme."}, {"id": 14, "string": "Through experiments carried out on the SemEval dataset (Kim et al., 2010) , we show that our model increases the performance of both supervised and unsupervised word weighting keyphrase extraction methods."}, {"id": 15, "string": "The rest of this paper is organized as follows."}, {"id": 16, "string": "In Section 2, we describe our ILP model for keyphrase extraction."}, {"id": 17, "string": "Our experiments are presented in Section 3."}, {"id": 18, "string": "In Section 4, we briefly review the previous work, and we conclude in Section 5."}, {"id": 19, "string": "Method Our global inference model for keyphrase extraction consists of three steps."}, {"id": 20, "string": "First, keyphrase candidates are extracted from the document using heuristic rules."}, {"id": 21, "string": "Second, words are weighted using either supervised or unsupervised methods."}, {"id": 22, "string": "Third, finding the optimal subset of keyphrase candidates is cast as an ILP and solved using an off-the-shelf solver."}, {"id": 23, "string": "Keyphrase candidate selection Candidate selection is the task of identifying the words or phrases that have properties similar to those of manually assigned keyphrases."}, {"id": 24, "string": "First, we apply the following pre-processing steps to the document: sentence segmentation 1 , word tokenization 2 and Part-Of-Speech (POS) tagging 3 ."}, {"id": 25, "string": "Following previous work (Wan and Xiao, 2008a; Bougouin et al., 2013) , we use the sequences of nouns and adjectives as keyphrase candidates."}, {"id": 26, "string": "Candidates that have less than three characters, that contain only adjectives, or that contain stop-words 4 are filtered out."}, {"id": 27, "string": "These heuristic rules are designed to avoid spurious instances and keep the number of candidates to a minimum (Hasan and Ng, 2014) ."}, {"id": 28, "string": "All words are stemmed using Porter's stemmer (Porter, 1980) ."}, {"id": 29, "string": "Word weighting functions The performance of our model depends on how word weights are estimated."}, {"id": 30, "string": "Here, we experiment with three methods for assigning importance weights to words."}, {"id": 31, "string": "The first two are unsupervised weighting functions, namely TF\u00d7IDF (Sp\u00e4rck Jones, 1972) and TextRank (Mihalcea and Tarau, 2004) , which have been extensively used in prior work (Hasan and Ng, 2010) ."}, {"id": 32, "string": "We also apply a supervised model for predicting word importance based on (Hong and Nenkova, 2014) ."}, {"id": 33, "string": "TF\u00d7IDF The weight of each word t is estimated using its frequency tf (t, d) in the document d and how many other documents include t (inverse document frequency), and is defined as: TF \u00d7 IDF(t, d) = tf (t, d) \u00d7 log(D/D t ) where D is the total number of documents and D t is the number of documents containing t. TextRank A co-occurrence graph is first built from the document in which nodes are words and edges represent the number of times two words co-occur in the same sentence."}, {"id": 34, "string": "TextRank (Mihalcea and Tarau, 2004 ), a graph-based ranking algorithm, is then used to compute the importance weight of each word."}, {"id": 35, "string": "Let d be a damping factor 5 , the Tex-tRank score S(V i ) of a node V i is initialized to a default value and computed iteratively until convergence using the following equation: S(V i ) = (1 \u2212 d) + d \u00d7 V j \u2208N (V i ) w ji \u00d7 S(V j ) V k \u2208N (V j ) w jk where N (V i ) is the set of nodes connected to V i and w ji is the weight of the edge between nodes V j and V i ."}, {"id": 36, "string": "TextRank implements the concept of \"voting\", i.e."}, {"id": 37, "string": "a word is important if it is highly connected to other words and if it is connected to important words."}, {"id": 38, "string": "Logistic regression We train a logistic regression model 6 for assigning importance weights to words in the document based on (Hong and Nenkova, 2014) ."}, {"id": 39, "string": "Reference keyphrases in the training data are used to generate positive and negative examples."}, {"id": 40, "string": "For a word in the document (restricted to adjectives and nouns), we assign label 1 if the word appears in the corresponding reference keyphrases, otherwise we assign 0."}, {"id": 41, "string": "We use the relative position of the first occurrence, the presence in the first sentence and the TF\u00d7IDF weight as features."}, {"id": 42, "string": "These features have been extensively used in supervised keyphrase extraction approaches, and have been shown to perform consistently well (Hasan and Ng, 2014)."}, {"id": 43, "string": "ILP model definition Our model is an adaptation of the conceptbased ILP model for summarization introduced by (Gillick and Favre, 2009) , in which sentence selection is cast as an instance of the budgeted maximum coverage problem 7 ."}, {"id": 44, "string": "The key assumption of our model is that the value of a set of keyphrase candidates is defined as the sum of the weights of the unique words it contains."}, {"id": 45, "string": "That way, a set of candidates only benefits from including each word once."}, {"id": 46, "string": "Words are thus assumed to be independent, that is, the value of including a word is not affected by the presence of any other word in the set of keyphrases."}, {"id": 47, "string": "Formally, let w i be the weight of word i, x i and c j two binary variables indicating the pres-ence of word i and candidate j in the set of extracted keyphrases, Occ ij an indicator of the occurrence of word i in candidate j and N the maximum number of extracted keyphrases, our model is described as: max i w i x i (1) s.t."}, {"id": 48, "string": "j c j \u2264 N (2) c j Occ ij \u2264 x i , \u2200i, j (3) j c j Occ ij \u2265 x i , \u2200i (4) x i \u2208 {0, 1} \u2200i c j \u2208 {0, 1} \u2200j The constraints formalized in equations 3 and 4 ensure the consistency of the solution: selecting a candidate leads to the selection of all the words it contains, and selecting a word is only possible if it is present in at least one selected candidate."}, {"id": 49, "string": "By summing over word weights, this model overly favors long candidates."}, {"id": 50, "string": "Indeed, given two keyphrase candidates, one being included in the other (e.g."}, {"id": 51, "string": "uddi registries and multiple uddi registries), this model always selects the longest one as its contribution to the objective function is larger."}, {"id": 52, "string": "To correct this bias, a regularization term is added to the objective function: max i w i x i \u2212 \u03bb j (l j \u2212 1)c j 1 + substr j (5) where l j is the size, in words, of candidate j, and substr j the number of times c j occurs as a subtring in the other candidates."}, {"id": 53, "string": "This regularization penalizes the candidates that are composed of more than two words, and is dampened for candidates that occur frequently as substrings in other candidates."}, {"id": 54, "string": "Here, we assume that for multiple candidates of the same size, the one that is less frequent in the document should be stressed first."}, {"id": 55, "string": "The resulting ILP is then solved exactly using an off-the-shelf solver 8 ."}, {"id": 56, "string": "The solving process takes less than a second per document on average."}, {"id": 57, "string": "The N candidate keyphrases returned by the solver are selected as keyphrases."}, {"id": 58, "string": "8 We use GLPK, http://www.gnu.org/ software/glpk/ 3 Experiments Experimental settings We carry out our experiments on the SemEval dataset (Kim et al., 2010) , which is composed of scientific articles collected from the ACM Digital Library."}, {"id": 59, "string": "The dataset is divided into training (144 documents) and test (100 documents) sets."}, {"id": 60, "string": "We use the set of combined author-and reader-assigned keyphrases as reference keyphrases."}, {"id": 61, "string": "We follow the common practice (Kim et al., 2010) and evaluate the performance of our method in terms of precision (P), recall (R) and f-measure (F) at the top N keyphrases 9 ."}, {"id": 62, "string": "Extracted and reference keyphrases are stemmed to reduce the number of mismatches."}, {"id": 63, "string": "For each word weighting function, namely TF\u00d7IDF, TextRank and Logistic regression, we compare the performance of our ILP model (hereafter ilp) with that of two word-based weighting baselines."}, {"id": 64, "string": "The first baseline (hereafter sum) simply ranks keyphrase candidates according to the sum of the weights of their component words as in (Wan and Xiao, 2008b; Wan and Xiao, 2008a) ."}, {"id": 65, "string": "The second baseline (hereafter norm) consists in scoring keyphrase candidates by computing the sum of the weights of their component words normalized by their length as in (Boudin, 2013) ."}, {"id": 66, "string": "As a post-processing step, we remove redundant keyphrases from the ranked lists generated by both baselines."}, {"id": 67, "string": "A keyphrase is considered redundant if it is included in another keyphrase that is ranked higher in the list."}, {"id": 68, "string": "IDF weights are computed on the training set."}, {"id": 69, "string": "The regularization parameter \u03bb is set, for all the experiments, to the value that achieves the best performance on the training set, that is 0.3 for TF\u00d7IDF, 0.4 for TextRank and 1.2 for Logistic regression."}, {"id": 70, "string": "Results The performance of our model on top of different word weighting functions is shown in Table 1 ."}, {"id": 71, "string": "Overall, our model consistently improves the performance over the baselines."}, {"id": 72, "string": "We observe that the results for sum are very low."}, {"id": 73, "string": "Summing the word weights favors long candidates and is prone to over-generation errors, as illustrated by the example in Table 2 ."}, {"id": 74, "string": "Normalizing the candidate scores by their lengths (norm) produces shorter candidates but does not limit the number of over-generation errors."}, {"id": 75, "string": "As we can see from the example in Table 2 , 9 out of 10 extracted keyphrases are containing the word nugget."}, {"id": 76, "string": "Our ILP model removes these redundant keyphrases by controlling the impact of each word on the set of extracted keyphrases."}, {"id": 77, "string": "The resulting set of keyphrases is more diverse and thus increases the coverage of the topics addressed in the document."}, {"id": 78, "string": "Note that the reported results are not on par with keyphrase extraction systems that use adhoc pre-processing, involve structural features and leverage external resources."}, {"id": 79, "string": "Rather our goal in this work is to demonstrate a simple and intuitive model for reducing over-generation errors."}, {"id": 80, "string": "Related Work In recent years, keyphrase extraction has attracted considerable attention and many different approaches were proposed."}, {"id": 81, "string": "Generally speaking, keyphrase extraction methods can be divided into two main categories: supervised and unsupervised approaches."}, {"id": 82, "string": "Supervised approaches treat keyphrase extraction as a binary classification task, where each phrase is labeled as keyphrase or nonkeyphrase (Witten et al., 1999; Turney, 2000; Kim and Kan, 2009; Lopez and Romary, 2010 clude graph-based ranking (Mihalcea and Tarau, 2004; Wan and Xiao, 2008a; Wan and Xiao, 2008b; Bougouin et al., 2013; Boudin, 2013) , topic-based clustering (Liu et al., 2009; Liu et al., 2010; Bougouin et al., 2013) , statistical models (Paukkeri and Honkela, 2010; El-Beltagy and Rafea, 2010) and language modeling (Tomokiyo and Hurst, 2003) ."}, {"id": 83, "string": "The work of (Ding et al., 2011) is perhaps the closest to our present work."}, {"id": 84, "string": "They proposed an ILP formulation of the keyphrase extraction prob-lem that combines TF\u00d7IDF and position features in an objective function subject to constraints of coherence and coverage."}, {"id": 85, "string": "In their model, coherence is measured by Mutual Information and coverage is estimated using Latent Dirichlet Allocation (LDA) (Blei et al., 2003) ."}, {"id": 86, "string": "Their work differs from ours in that (1) it is phrased-based and thus does not penalize redundant keyphrases, and (2) it requires estimating a large number of hyperparameters which makes it difficult to generalize."}, {"id": 87, "string": "Conclusion and Future Work In this paper, we proposed an ILP formulation for keyphrase extraction that reduces over-generation errors by weighting keyphrase candidates as a set rather than independently."}, {"id": 88, "string": "In our model, keyphrases are selected according to their component words, and the weight of each unique word is counted only once."}, {"id": 89, "string": "Experiments show a substantial improvement over commonly used wordbased ranking approaches using either supervised and unsupervised weighting schemes."}, {"id": 90, "string": "In future work, we intend to extend our model to include word relatedness through the use of association measures."}, {"id": 91, "string": "By doing so, we expect to better differentiate semantically related keyphrase candidates according to the association strength between their component words."}], "headers": [{"section": "Introduction", "n": "1", "start": 0, "end": 18}, {"section": "Method", "n": "2", "start": 19, "end": 22}, {"section": "Keyphrase candidate selection", "n": "2.1", "start": 23, "end": 28}, {"section": "Word weighting functions", "n": "2.2", "start": 29, "end": 31}, {"section": "TF\u00d7IDF", "n": "2.2.1", "start": 32, "end": 33}, {"section": "TextRank", "n": "2.2.2", "start": 34, "end": 37}, {"section": "Logistic regression", "n": "2.2.3", "start": 38, "end": 42}, {"section": "ILP model definition", "n": "2.3", "start": 43, "end": 57}, {"section": "Experimental settings", "n": "3.1", "start": 58, "end": 69}, {"section": "Results", "n": "3.2", "start": 70, "end": 79}, {"section": "Related Work", "n": "4", "start": 80, "end": 86}, {"section": "Conclusion and Future Work", "n": "5", "start": 87, "end": 91}], "figures": [{"filename": "../figure/image/974-Table2-1.png", "caption": "Table 2: Example of the top-10 extracted keyphrases for the document J-3 of the SemEval dataset. Keyphrases are stemmed and whose that match reference keyphrases are marked bold.", "page": 3, "bbox": {"x1": 310.56, "x2": 510.24, "y1": 296.15999999999997, "y2": 507.35999999999996}}, {"filename": "../figure/image/974-Table1-1.png", "caption": "Table 1: Comparison of TF\u00d7IDF, TextRank and Logistic regression for different ranking strategies when extracting a maximum of 5 and 10 keyphrases. Results are expressed as a percentage of precision (P), recall (R) and f-measure (F). \u2020 indicates significance at the 0.05 level using Student\u2019s t-test.", "page": 3, "bbox": {"x1": 117.6, "x2": 479.03999999999996, "y1": 63.36, "y2": 232.32}}]}